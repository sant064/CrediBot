// /repositories/sessionRepository.js

const pb = require('../config/pocketbaseClient');
const COLLECTION_ID = 'pbc_3660498186'; // <-- ¬°PONER EL ID REAL!

/**
 * Busca una sesi√≥n por el 'sender'. Si no existe, la crea.
 * Si existe, incrementa el contador de mensajes.
 * @param {string} sender El n√∫mero de tel√©fono del usuario.
 * @returns {Promise<object>} El registro de la sesi√≥n.
 */
async function findOrCreateSession(sender) {
  try {
    //console.log(`[SessionRepo] üîé Buscando sesi√≥n con sender: "${sender}"`);
    const session = await pb.collection(COLLECTION_ID).getFirstListItem(`sender = "${sender}"`);

    //console.log(`[SessionRepo] ‚úÖ Sesi√≥n encontrada para ${sender}. ID: ${session.id}, Contador actual: ${session.message_count}`);
    
    // --- CORRECCI√ìN DEFINITIVA ---
    // 1. Convertimos el valor del contador a un n√∫mero entero con parseInt().
    const currentCount = parseInt(session.message_count, 10);
    
    // 2. Ahora, la suma es matem√°tica, no de texto.
    const newCount = currentCount + 1; 
    
    const updatedSession = await pb.collection(COLLECTION_ID).update(session.id, {
      message_count: newCount,
    });
    // --- FIN DE LA CORRECCI√ìN ---

    //console.log(`[SessionRepo] ‚ú® Contador incrementado. Nuevo contador: ${updatedSession.message_count}`);
    return updatedSession;

  } catch (error) {
    if (error.status === 404) {
     // console.log(`[SessionRepo] ‚ö†Ô∏è  No se encontr√≥ sesi√≥n para "${sender}". Creando una nueva...`);
      const newSession = await pb.collection(COLLECTION_ID).create({
        sender: sender,
        message_count: 1,
        intent: null
      });
     // console.log(`[SessionRepo] ‚úÖ Nueva sesi√≥n creada con ID: ${newSession.id}`);
      return newSession;
    }
    console.error(`[SessionRepo] üî¥ Error buscando/creando sesi√≥n:`, error);
    throw error;
  
  }
}

/**
 * Actualiza la intenci√≥n de una sesi√≥n espec√≠fica.
 * @param {string} sessionId El ID del registro de la sesi√≥n.
 * @param {string} intent La intenci√≥n reconocida.
 * @returns {Promise<object>} La sesi√≥n actualizada.
 */
async function updateIntent(sessionId, intent) {
 // console.log(`[SessionRepo] üìù Actualizando intenci√≥n a "${intent}" para la sesi√≥n ${sessionId}`);
  const updatedSession = await pb.collection(COLLECTION_ID).update(sessionId, { intent });
  return updatedSession;
}

async function updateSessionData(sessionId, updateData) {
 // console.log(`[SessionRepo] üìù Actualizando intenci√≥n a "${updateData}" para la sesi√≥n ${sessionId}`);
  var intent=updateData
  const updatedSession = await pb.collection(COLLECTION_ID).update(sessionId, { intent });
  return updatedSession;
}


module.exports = {
  findOrCreateSession,
  updateIntent,updateSessionData
};