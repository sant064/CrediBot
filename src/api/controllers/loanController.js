// /controllers/loanController.js

const loanRepository = require('../../repositories/loanRepository');
const intelligenceService = require('../../services/intelligenceService');
const stateHandlers = require('../../core/state-machine/shandlers/');
const loanFsmConfig = require('../../core/fsm-configs/loan.config');

// Mapeo del nombre del handler al estado de la solicitud en la BBDD
// NOTA: Esto idealmente deber√≠a estar en loanFsmConfig o un archivo de constantes, pero lo dejamos aqu√≠ para la l√≥gica del controlador.
const handlerToStateMap = {
    'handle_pedir_cedula': 'ESPERANDO_CEDULA',
    'handle_preguntar_empresa': 'ESPERANDO_EMPRESA',
    'handle_ciudad_barrio_persona': 'ESPERANDO_CIUDAD_BARRIO',
    'handle_referencias_personales': 'ESPERANDO_REFERENCIAS',
    'handle_pedir_monto': 'ESPERANDO_MONTO',
    'handle_foto_cedula': 'ESPERANDO_FOTO_CEDULA',
    'handle_finalizar_solicitud': 'FINALIZADO',
    'handle_rechazado_moroso': 'RECHAZADO_MOROSO',
    'handle_repetir_pregunta_deuda': 'ESPERANDO_RESPUESTA_DEUDA', // Se mantiene el estado si repetimos
    // Aseg√∫rate de a√±adir mapeos para todos tus handlers aqu√≠
};

const processDataCollectionStep = async (req, res) => {
    console.log('=============================================');
    console.log('[LoanController] ‚ö° Procesando paso de recolecci√≥n de datos...');
    
    try {
        const { sender, message } = req.body;
        console.log(`[LoanController] ‚û°Ô∏è Petici√≥n recibida: sender=${sender}, message="${message}"`);
        console.log(req.body);

        console.log(`[LoanController] üîç Buscando o creando solicitud para sender: ${sender}`);
        let solicitud = await loanRepository.findOrCreateLoanApplication(sender); // Usamos 'let' para reasignar despu√©s de la actualizaci√≥n
        console.log(`[LoanController] üìÑ Solicitud obtenida. ID: ${solicitud.id}, Estado Actual: ${solicitud.estado_solicitud}, Datos iniciales:`, solicitud);

        let datos_extraidos = {};
        let siguiente_handler;

        // L√≥gica para determinar el siguiente handler
        if (solicitud.estado_solicitud === 'INICIADA') {
            console.log('[LoanController] üö¶ Estado detectado: INICIADA. Saltando IA y usando handler inicial.');
            siguiente_handler = loanFsmConfig.initialState; // Asume que 'initialState' contiene el nombre del primer handler.
            console.log(`[LoanController] ‚û°Ô∏è Siguiente handler definido (INICIADA): "${siguiente_handler}"`);
            // Nota: Aqu√≠ 'datos_extraidos' permanece vac√≠o.
        } else {
            console.log('[LoanController] üß† Estado NO INICIADA. Consultando servicio de inteligencia...');
            const intelligenceResult = await intelligenceService.processStep({
                config: loanFsmConfig,
                currentState: solicitud,
                message: message
            });
            datos_extraidos = intelligenceResult.datos_extraidos;
            siguiente_handler = intelligenceResult.siguiente_handler;
            console.log(`[LoanController] üß† Resultado IA: datos_extraidos=`, datos_extraidos, `siguiente_handler="${siguiente_handler}"`);
        }
        
        // --- ¬°ACTUALIZACI√ìN CR√çTICA DEL ESTADO AQU√ç! ---
        let updates = { ...datos_extraidos };
        const nuevoEstado = handlerToStateMap[siguiente_handler];

        if (nuevoEstado && nuevoEstado !== solicitud.estado_solicitud) {
            updates.estado_solicitud = nuevoEstado; // A√±adimos el nuevo estado a las actualizaciones
            console.log(`[LoanController] üîÑ Transici√≥n de estado: ${solicitud.estado_solicitud} -> ${nuevoEstado}`);
        } else if (nuevoEstado) {
            console.log(`[LoanController] ‚ÑπÔ∏è Estado ${solicitud.estado_solicitud} se mantiene. Nuevo handler: ${siguiente_handler}`);
        } else {
            // Caso de fallback: El handler no est√° mapeado, se mantiene el estado actual de la solicitud si no hay datos.
            console.warn(`[LoanController] ‚ö†Ô∏è Handler "${siguiente_handler}" NO MAPEADO a un estado conocido. El estado no se actualizar√°.`);
        }

        // Si hay datos extra√≠dos O un nuevo estado, actualizamos la BBDD
        if (Object.keys(updates).length > 0) {
            console.log(`[LoanController] üíæ Actualizando BBDD antes del handler:`, updates);
            // Actualizamos la base de datos y reasignamos la variable 'solicitud' con la versi√≥n m√°s fresca.
            solicitud = await loanRepository.updateLoanApplication(solicitud.id, updates);
            console.log(`[LoanController] ‚úÖ BBDD actualizada. Nuevo estado: ${solicitud.estado_solicitud}`);
        } else {
            console.log('[LoanController] ‚ÑπÔ∏è No se extrajeron datos significativos ni cambio de estado aplica antes del handler.');
        }
        // --- FIN DE LA ACTUALIZACI√ìN CR√çTICA ---

        // Buscamos el handler adecuado para el siguiente paso.
        console.log(`[LoanController] üéØ Intentando encontrar handler para: "${siguiente_handler}"`);
        const handler = stateHandlers[siguiente_handler];

        let response;
        if (handler) {
            console.log(`[LoanController] ‚úÖ Handler encontrado: "${siguiente_handler}".`);
            // Pasamos la solicitud ya actualizada (y posiblemente con el nuevo estado) al handler.
            console.log(`[LoanController] üöÄ Llamando handler "${siguiente_handler}" con solicitud actualizada...`);
            response = await handler.handle(solicitud); 
            console.log(`[LoanController] ‚úÖ Handler "${siguiente_handler}" completado. Respuesta:`, response);
        } else {
            console.warn(`[LoanController] ‚ö†Ô∏è NO SE ENCONTR√ì HANDLER para el estado: "${siguiente_handler}". Usando respuesta de fallback.`);
            response = { next_message: "Estamos procesando tu informaci√≥n. Un agente se pondr√° en contacto contigo en breve." };
        }
        
        // Enviamos la respuesta final al usuario.
        if (response && !response.async_process_running) {
            console.log(`[LoanController] ‚úÖ Enviando respuesta final al usuario: "${response.next_message}"`);
            res.json({ next_message: response.next_message });
        } else if (response && response.async_process_running) {
            console.log(`[LoanController] ‚è≥ El handler "${siguiente_handler}" inici√≥ un proceso as√≠ncrono. No se env√≠a respuesta inmediata.`);
            res.status(202).json({ next_message: "Procesando su solicitud en segundo plano.", async_process: true });
        } else {
            console.error('[LoanController] üî¥ El handler no devolvi√≥ una respuesta v√°lida.');
            res.status(500).json({ error: 'Error interno: El handler no gener√≥ una respuesta.' });
        }

    } catch (error) {
        console.error('[LoanController] üî¥ ERROR FATAL en processDataCollectionStep:', error);
        console.error('[LoanController] üö® Detalles del error:', error.message, error.stack);
        res.status(500).json({ error: 'Error interno del servidor al procesar el paso.' });
    } finally {
        console.log('=============================================');
    }
};

module.exports = { 
    processDataCollectionStep 
};