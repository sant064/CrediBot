// /services/prospectingService.js
require('dotenv').config();
const axios = require('axios');

const GOOGLE_PLACES_API_URL = process.env.GOOGLE_MAPS_API_URL || "https://maps.googleapis.com/maps/api/place/textsearch/json"; // Valor por defecto para prueba
const GOOGLE_DETAILS_API_URL = "https://maps.googleapis.com/maps/api/place/details/json";
// Aseg√∫rate de tener tu API KEY en un archivo .env o reempl√°zala aqu√≠ para la prueba
const GOOGLE_MAPS_API_KEY = process.env.GOOGLE_MAPS_API_KEY;

// --- FUNCI√ìN DE AYUDA ---

/**
 * Nombres de calles comunes en ciudades de Paraguay para generar datos realistas.
 */
const streetNames = [
    // Asunci√≥n (Capital)
    "Mariscal L√≥pez", "Espa√±a", "General Santos", "Aviadores del Chaco", "Santa Teresa",
    "Boggiani", "Eusebio Ayala", "Fernando de la Mora", "25 de Mayo", "Cerro Cor√°",
    "Eligio Ayala", "Brasil", "Per√∫", "Artigas", "Defensores del Chaco", "Palma",
    "Col√≥n", "Presidente Franco", "Iturbe", "M√©xico", "Paraguari", "Antequera",
    "Tacuar√≠", "Estados Unidos", "Avenida Rep√∫blica Argentina", "Avenida Madame Lynch",
    "Avenida Kubitschek", "Avenida Sacramento", "Doctor Bestard", "Choferes del Chaco",
    "Avenida General Jos√© Gervasio Artigas", "Avenida Doctor Eusebio Ayala", "Avenida F√©lix Bogado",

    // Ciudad del Este (Alto Paran√°)
    "San Blas", "Monse√±or Rodriguez", "Adri√°n Jara", "Pioneros del Este", "Avenida del Lago",
    "Bernardino Caballero", "Regimiento Piribebuy", "Boquer√≥n", "Nanawa", "Tup√≠ Guaran√≠",
    "Avenida Alejo Garc√≠a", "Avenida Itaipu Oeste", "Avenida Itaipu Este", "Capit√°n Miranda",
    "Pa√≠ P√©rez", "Curupayty", "Avenida Rogelio Ben√≠tez", "Avenida Julio C√©sar Riquelme",
    "Avenida Fort√≠n Toledo", "Calle Tuyuti", "Avenida Amambay", "Avenida Guarania",

    // Caaguaz√∫ (Caaguaz√∫)
    "Independencia Nacional", "Presidente Franco", "Doctor Bottrell", "General D√≠az",
    "Bernardino Caballero", "Mariscal Estigarribia", "15 de Agosto", "Caaguaz√∫", "Guair√°",
    "Coronel Oviedo", "San Lorenzo", "Avenida Berlamino Garcia", "Calle Panchito L√≥pez",
    "Calle Fulgencio Yegros", "Calle General Bruguez", "Calle Carlos Antonio L√≥pez",

    // Encarnaci√≥n (Itap√∫a)
    "Mariscal Estigarribia", "Avenida Irraz√°bal", "Doctor Juan Le√≥n Mallorqu√≠n", "Carlos Antonio L√≥pez",
    "General Caba√±as", "Padre Kreusser", "Monse√±or Wiessen", "Avenida Costanera Rep√∫blica del Paraguay",
    "Padre Juan Von Winckel", "Avenida Caballero", "Calle Memmel", "Avenida Jap√≥n",
    "Avenida Ucrania", "Avenida Alemania", "Calle Cerro Cor√°", "Calle Antequera",

    // Luque (Central)
    "General Aquino", "Capit√°n Bado", "Avenida Corrales", "Avenida Humait√°", "Avenida General Elizardo Aquino",
    "Avenida Las Residentas", "Balderrama", "Rosario", "Sportivo Luque√±o", "Mois√©s Bertoni",
    "Javier Bogar√≠n", "Curupayty", "Avenida Nanawa", "Calle Sauce", "Calle Iturbe",

    // San Lorenzo (Central)
    "Mariscal Estigarribia", "Avenida del Agr√≥nomo", "Avenida Avelino Mart√≠nez", "Doctor Gabriel Pell√≥n",
    "Doctor Francia", "Coronel Romero", "10 de Agosto", "Julia Miranda Cueto", "Saturio R√≠os",
    "Espa√±a", "Calle Manuel Ortiz Guerrero", "Avenida Laguna Grande", "Calle Hernandarias",
    "Calle Sargento Silva", "Avenida Pastora C√©spedes", "Calle 14 de Mayo"
];

/**
 * Selecciona un elemento aleatorio de un array.
 * @param {Array<string>} arr - El array del cual seleccionar.
 * @returns {string} - Un elemento aleatorio.
 */
const getRandomElement = (arr) => arr[Math.floor(Math.random() * arr.length)];


/**
 * Extrae las primeras dos palabras de un string.
 * @param {string} text - El texto original.
 * @returns {string} - Las primeras dos palabras o el texto original si tiene menos.
 */
const getFirstTwoWords = (text) => {
    if (!text) return "";
    const words = text.trim().split(/\s+/); // Divide por espacios
    return words.slice(0, 2).join(" "); // Toma las primeras 2 y las une con un espacio
};


/**
 * Analiza, formatea y, si es necesario, inventa una direcci√≥n con formato de cruce de calles.
 * @param {string|null} address - La direcci√≥n original de Google.
 * @returns {string} - La direcci√≥n formateada.
 */
/**
 * Analiza, formatea y, si es necesario, inventa una direcci√≥n para que SIEMPRE
 * tenga el formato "Calle 1 c/ Calle 2", usando solo las primeras dos palabras de cada calle.
 * @param {string|null} address - La direcci√≥n original de Google.
 * @returns {string} - La direcci√≥n formateada como cruce (ej: "Nuestra Se√±ora c/ San Lorenzo").
 */
function formatAndValidateAddress(address) {
    console.log(`[AddressFormatter] üßê Analizando direcci√≥n original: "${address}"`);

    // --- Caso 1: Direcci√≥n inv√°lida o nula ---
    if (!address || typeof address !== 'string' || address.trim().length === 0) {
        console.log(`[AddressFormatter] ‚ö†Ô∏è Direcci√≥n nula/inv√°lida. Generando una aleatoria.`);
        let street1Raw = getRandomElement(streetNames);
        let street2Raw = getRandomElement(streetNames);
        while (street1Raw === street2Raw) {
            street2Raw = getRandomElement(streetNames);
        }
        // Aplicar getFirstTwoWords
        const street1 = getFirstTwoWords(street1Raw);
        const street2 = getFirstTwoWords(street2Raw);
        return `${street1} c/ ${street2}`;
    }

    // --- Limpieza Inicial ---
    let cleanedAddress = address.replace(/, Paraguay/gi, '')
                                .replace(/\b\d{1,5}\b/g, '') // Elimina n√∫meros de casa
                                // ... (otras limpiezas como piso, local, etc.)
                                .replace(/[, ]+$/, '').replace(/^[, ]+/, '').trim();

    const addressParts = cleanedAddress.split(',').map(part => part.trim());
    let mainAddressPart = addressParts[0];
    console.log(`[AddressFormatter] ‚ú® Direcci√≥n pre-limpiada: "${mainAddressPart}"`);

    // --- Caso 2: Ya tiene formato de cruce ---
    const intersectionRegex = /(.+?)\s*(?:\bc\/|\by\b|\be\b|\besquina\b)\s*(.+)/i;
    const match = mainAddressPart.match(intersectionRegex);

    if (match && match[1] && match[2]) {
        let street1Raw = match[1].trim();
        let street2Raw = match[2].trim().split(',')[0].trim(); // Limpia ciudad pegada
        console.log(`[AddressFormatter] ‚úÖ Cruce detectado: "${street1Raw} c/ ${street2Raw}"`);
        // Aplicar getFirstTwoWords
        const street1 = getFirstTwoWords(street1Raw);
        const street2 = getFirstTwoWords(street2Raw);
        return `${street1} c/ ${street2}`;
    }

    // --- Caso 3: Direcci√≥n muy gen√©rica ---
    const genericAddressRegex = /^(Asunci√≥n|Ciudad del Este|Caaguaz√∫|Encarnaci√≥n|Luque|San Lorenzo)$/i;
    if (genericAddressRegex.test(mainAddressPart) || addressParts.length < 1 || mainAddressPart.length < 5) {
        console.log(`[AddressFormatter] üí° Direcci√≥n muy gen√©rica ("${mainAddressPart}"). Inventando un cruce.`);
        let street1Raw = getRandomElement(streetNames);
        let street2Raw = getRandomElement(streetNames);
        while (street1Raw === street2Raw) {
            street2Raw = getRandomElement(streetNames);
        }
        // Aplicar getFirstTwoWords
        const street1 = getFirstTwoWords(street1Raw);
        const street2 = getFirstTwoWords(street2Raw);
        return `${street1} c/ ${street2}`;
    }

    // --- Caso 4: Direcci√≥n parece tener una sola calle ---
    console.log(`[AddressFormatter] üí° Una sola calle detectada ("${mainAddressPart}"). Inventando la segunda.`);
    let street1Raw = mainAddressPart;
    let street2Raw = getRandomElement(streetNames);
    while (street2Raw.toLowerCase() === street1Raw.toLowerCase() || streetNames.filter(s => s.toLowerCase() === street1Raw.toLowerCase()).length > 1 && street2Raw.toLowerCase().includes(street1Raw.toLowerCase().substring(0,5)) ) {
         street2Raw = getRandomElement(streetNames);
    }
    // Aplicar getFirstTwoWords
    const street1 = getFirstTwoWords(street1Raw);
    const street2 = getFirstTwoWords(street2Raw);
    return `${street1} c/ ${street2}`;
}

// --- SERVICIO PRINCIPAL ---

async function getPlaceDetails(placeId) {
    console.log(`[ProspectingService] üìû Obteniendo detalles para place_id: ${placeId}`);

    const params = {
        place_id: placeId,
        key: GOOGLE_MAPS_API_KEY,
        fields: "name,formatted_phone_number,international_phone_number,formatted_address,rating",
        language: 'es'
    };

    try {
        const response = await axios.get(GOOGLE_DETAILS_API_URL, { params });
        return response.data.result;
    } catch (error) {
        console.error(`[ProspectingService] üî¥ Error obteniendo detalles para ${placeId}:`, error.message);
        return null;
    }
}

async function findBusiness(businessName) {
    console.log(`[ProspectingService] üîç Buscando lugar para: "${businessName}"...`);

    if (!GOOGLE_MAPS_API_KEY) {
        console.error("üî¥ ¬°ERROR! La variable de entorno GOOGLE_MAPS_API_KEY no est√° definida.");
        return null;
    }

    const searchParams = {
        query: `${businessName} en Paraguay`,
        key: GOOGLE_MAPS_API_KEY,
        language: 'es',
        region: 'py'
    };

    try {
        const searchResponse = await axios.get(GOOGLE_PLACES_API_URL, { params: searchParams });
        const searchResults = searchResponse.data.results;

        if (!searchResults || searchResults.length === 0) {
            console.log(`[ProspectingService] ü§∑ No se encontraron resultados en la b√∫squeda.`);
            return null;
        }

        const selectedPlace = searchResults[0];

        if (!selectedPlace.place_id) {
            console.log(`[ProspectingService] ‚ö†Ô∏è El resultado principal no tiene place_id.`);
            const basicInfo = {
                nombre: selectedPlace.name || "Sin nombre",
                telefono: null,
                direccion: formatAndValidateAddress(selectedPlace.formatted_address),
                rating: selectedPlace.rating || null
            };
            // --- IMPRESI√ìN DEL RESULTADO FINAL ---
            console.log("------------------- RESULTADO FINAL -------------------");
            console.log(JSON.stringify(basicInfo, null, 2));
            console.log("-----------------------------------------------------");
            return basicInfo;
        }

        const placeDetails = await getPlaceDetails(selectedPlace.place_id);

        if (!placeDetails) {
            console.log(`[ProspectingService] ‚ö†Ô∏è No se pudieron obtener los detalles.`);
            return null;
        }

        const business = {
            nombre: placeDetails.name || "Sin nombre",
            telefono: placeDetails.formatted_phone_number || placeDetails.international_phone_number || null,
            direccion: formatAndValidateAddress(placeDetails.formatted_address),
            rating: placeDetails.rating || null
        };

        console.log(`[ProspectingService] ‚úÖ Datos completos obtenidos para: "${business.nombre}"`);
        
        // --- IMPRESI√ìN DEL RESULTADO FINAL ---
        console.log("\n------------------- RESULTADO FINAL -------------------");
        console.log(JSON.stringify(business, null, 2));
        console.log("-----------------------------------------------------\n");
        
        return business;

    } catch (error) {
        console.error("[ProspectingService] üî¥ Error en el flujo de b√∫squeda:", error.response ? error.response.data : error.message);
        return null;
    }
}

module.exports = {
    findBusiness,
};


// --- BLOQUE DE PRUEBA PARA EJECUTAR DIRECTAMENTE ---
// Para usarlo, ejecuta en tu terminal: node services/prospectingService.js
// Necesitas tener un archivo .env con tu GOOGLE_MAPS_API_KEY
const main = async () => {
    // ---- Elige el negocio que quieres probar ----
    const businessToFind = "Shopping Par√≠s"; 
    // const businessToFind = "Biggie Express Asunci√≥n";
    // const businessToFind = "Pizzeria Lo de Osvaldo";
    
    console.log(`=====================================================`);
    console.log(`            INICIANDO PRUEBA DE B√öSQUEDA`);
    console.log(`=====================================================`);
    await findBusiness(businessToFind);
};

// Esta l√≠nea verifica si el archivo se est√° ejecutando directamente
if (require.main === module) {
    main();
}