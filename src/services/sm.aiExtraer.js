require('dotenv').config();
const { GoogleGenerativeAI } = require("@google/generative-ai");

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const modelName = process.env.GEMINI_MODEL || "gemini-pro";
console.log(`[AIService] ü§ñ Usando el modelo de IA: "${modelName}"`);
const model = genAI.getGenerativeModel({ model: modelName });

// ========================================================================
// ¬°NUEVO! Constantes de Reintentos
// ========================================================================
const MAX_AI_RETRIES = 3;
const AI_RETRY_DELAY_MS = 5000; // 5 segundos

// ========================================================================
// LISTA DE CALLES Y FUNCI√ìN DE AYUDA
// ========================================================================
const streetNames = [
    // Asunci√≥n (Capital)
    "Mariscal L√≥pez", "Espa√±a", "General Santos", "Aviadores del Chaco", "Santa Teresa",
    "Boggiani", "Eusebio Ayala", "Fernando de la Mora", "25 de Mayo", "Cerro Cor√°",
    "Eligio Ayala", "Brasil", "Per√∫", "Artigas", "Defensores del Chaco", "Palma",
    "Col√≥n", "Presidente Franco", "Iturbe", "M√©xico", "Paraguari", "Antequera",
    "Tacuar√≠", "Estados Unidos", "Avenida Rep√∫blica Argentina", "Avenida Madame Lynch",
    "Avenida Kubitschek", "Avenida Sacramento", "Doctor Bestard", "Choferes del Chaco",
    "Avenida General Jos√© Gervasio Artigas", "Avenida Doctor Eusebio Ayala", "Avenida F√©lix Bogado",

    // Ciudad del Este (Alto Paran√°)
    "San Blas", "Monse√±or Rodriguez", "Adri√°n Jara", "Pioneros del Este", "Avenida del Lago",
    "Bernardino Caballero", "Regimiento Piribebuy", "Boquer√≥n", "Nanawa", "Tup√≠ Guaran√≠",
    "Avenida Alejo Garc√≠a", "Avenida Itaipu Oeste", "Avenida Itaipu Este", "Capit√°n Miranda",
    "Pa√≠ P√©rez", "Curupayty", "Avenida Rogelio Ben√≠tez", "Avenida Julio C√©sar Riquelme",
    "Avenida Fort√≠n Toledo", "Calle Tuyuti", "Avenida Amambay", "Avenida Guarania",

    // Caaguaz√∫ (Caaguaz√∫)
    "Independencia Nacional", "Presidente Franco", "Doctor Bottrell", "General D√≠az",
    "Bernardino Caballero", "Mariscal Estigarribia", "15 de Agosto", "Caaguaz√∫", "Guair√°",
    "Coronel Oviedo", "San Lorenzo", "Avenida Berlamino Garcia", "Calle Panchito L√≥pez",
    "Calle Fulgencio Yegros", "Calle General Bruguez", "Calle Carlos Antonio L√≥pez",

    // Encarnaci√≥n (Itap√∫a)
    "Mariscal Estigarribia", "Avenida Irraz√°bal", "Doctor Juan Le√≥n Mallorqu√≠n", "Carlos Antonio L√≥pez",
    "General Caba√±as", "Padre Kreusser", "Monse√±or Wiessen", "Avenida Costanera Rep√∫blica del Paraguay",
    "Padre Juan Von Winckel", "Avenida Caballero", "Calle Memmel", "Avenida Jap√≥n",
    "Avenida Ucrania", "Avenida Alemania", "Calle Cerro Cor√°", "Calle Antequera",

    // Luque (Central)
    "General Aquino", "Capit√°n Bado", "Avenida Corrales", "Avenida Humait√°", "Avenida General Elizardo Aquino",
    "Avenida Las Residentas", "Balderrama", "Rosario", "Sportivo Luque√±o", "Mois√©s Bertoni",
    "Javier Bogar√≠n", "Curupayty", "Avenida Nanawa", "Calle Sauce", "Calle Iturbe",

    // San Lorenzo (Central)
    "Mariscal Estigarribia", "Avenida del Agr√≥nomo", "Avenida Avelino Mart√≠nez", "Doctor Gabriel Pell√≥n",
    "Doctor Francia", "Coronel Romero", "10 de Agosto", "Julia Miranda Cueto", "Saturio R√≠os",
    "Espa√±a", "Calle Manuel Ortiz Guerrero", "Avenida Laguna Grande", "Calle Hernandarias",
    "Calle Sargento Silva", "Avenida Pastora C√©spedes", "Calle 14 de Mayo"
];

const getRandomElement = (arr) => arr[Math.floor(Math.random() * arr.length)];


// ========================================================================
// PROMPT DE SISTEMA AVANZADO
// ========================================================================
const SYSTEM_PROMPT_EXTRACTOR = `
Eres un asistente de IA experto en procesar datos de referencias y direcciones para un sistema en Paraguay. Tu funci√≥n es EXTRACCI√ìN y COMPLETADO.

**REGLAS ESTRICTAS:**
1.  **DETECTA DATOS:** Analiza el texto en busca de los campos solicitados.
2.  **FORMATO JSON ESTRICTO:** Tu respuesta DEBE ser √∫nicamente un objeto JSON v√°lido.
3.  **CLAVES EXACTAS:** Utiliza SOLAMENTE las claves proporcionadas (ej: "ciudad", "barrio", "referencia_1").
4.  **REFERENCIAS:** Para cada referencia, combina nombre y tel√©fono en un solo texto ("Nombre Apellido Telefono"). Limpia el tel√©fono de espacios o guiones.
5.  **DIRECCI√ìN:** Extrae ciudad y barrio si est√°n presentes. No inventes calles.

**L√ìGICA DE COMPLETADO (SOLO PARA REFERENCIAS):**
* **SI SOLO HAY TEL√âFONO:** Inventa nombre y apellido com√∫n de Paraguay.
* **SI SOLO HAY UN NOMBRE/APODO:** Inventa apellido com√∫n de Paraguay.
* **SI EL NOMBRE ES UN APODO FAMILIAR (mam√°, pap√°, t√≠o, etc.):** IGNORA el apodo e INVENTA nombre y apellido nuevos.
* **SI SOLO HAY NOMBRE (SIN TEL√âFONO):** Ignora la referencia.

**EJEMPLOS DE RESPUESTA JSON:**
{ "ciudad": "Asunci√≥n", "barrio": "Sajonia" }
{ "referencia_1": "Sofi Benitez 0981123456", "referencia_2": "Carlos Vera 0971987654" }
{ "ciudad": "Luque", "referencia_1": "Graciela Gonzalez 0981123456" }
`;

// Funci√≥n de ayuda para la espera (delay)
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// ========================================================================
// EXTRACTOR Y MERGER DE DATOS (Funci√≥n Unificada)
// ========================================================================
/**
 * Extrae datos de un mensaje y los fusiona con el estado actual de la BBDD.
 * @param {string} message - El mensaje del usuario.
 * @param {object} currentState - El objeto con los datos actuales de la BBDD (la 'solicitud').
 * @returns {object} - Un objeto listo para actualizar la BBDD.
 */
async function extractDataFromMessage(message, currentState) {
    console.log("[AIService] üì• Extrayendo y fusionando datos del mensaje:", message);
    console.log("[AIService] üì• Estado actual BBDD:", currentState);

    if (!currentState) {
        console.error("[AIService] üî¥ ¬°ERROR! currentState (solicitud) es undefined.");
        return {};
    }

    // 1. Determinar qu√© campos faltan en el estado actual
    const missingFields = [];
    if (!currentState.ciudad) missingFields.push("ciudad: la ciudad donde vive el usuario");
    if (!currentState.barrio) missingFields.push("barrio: el barrio donde vive el usuario");
    if (!currentState.referencia_1) missingFields.push("referencia_1: la primera referencia (nombre y tel√©fono)");
    if (!currentState.referencia_2) missingFields.push("referencia_2: la segunda referencia (nombre y tel√©fono)");
    if (!currentState.referencia_3) missingFields.push("referencia_3: la tercera referencia (nombre y tel√©fono)");

    if (missingFields.length === 0) {
        console.log("[AIService] ‚úÖ No faltan campos clave. No se necesita extracci√≥n.");
        return {};
    }

    const finalPrompt = `${SYSTEM_PROMPT_EXTRACTOR}
**TAREA ACTUAL:**
-   Campos a extraer (solo los que faltan):
${missingFields.join('\n')}
-   Texto del usuario: "${message}"
-   TU RESPUESTA JSON:
`;
    
    let extractedData = {}; // Datos extra√≠dos por la IA
    const outputData = {}; // Objeto final a devolver
    let aiSuccess = false; // Flag para saber si la IA funcion√≥

    try {
        // ====================================================================
        // --- ¬°NUEVO! 2. Llamar a la IA con l√≥gica de reintentos ---
        // ====================================================================
        for (let attempt = 1; attempt <= MAX_AI_RETRIES; attempt++) {
            try {
                console.log(`[AIService - Extractor] ü§ñ Intento de IA ${attempt}/${MAX_AI_RETRIES}...`);
                
                const result = await model.generateContent(finalPrompt);
                let text = result.response.text().replace(/```json|```/g, '').trim();
                if (text.startsWith('{') === false) text = '{' + text.split('{').pop();
                
                extractedData = JSON.parse(text); // Parsea la respuesta de Gemini
                
                console.log("[AIService - Extractor] ‚ú® Datos extra√≠dos por IA:", extractedData);
                aiSuccess = true; // Marcamos √©xito
                break; // Salimos del bucle de reintentos
                
            } catch (aiError) {
                console.error(`[AIService - Extractor] üî¥ Error IA en intento ${attempt}/${MAX_AI_RETRIES}:`, aiError.message);
                if (attempt < MAX_AI_RETRIES) {
                    console.log(`[AIService - Extractor] ‚è≥ Reintentando en ${AI_RETRY_DELAY_MS / 1000} segundos...`);
                    await sleep(AI_RETRY_DELAY_MS);
                }
            }
        }

        // Si despu√©s de todos los intentos, no hubo √©xito, lanzamos un error
        if (!aiSuccess) {
            throw new Error("Fallaron todos los intentos de comunicaci√≥n con la IA.");
        }
        
        // --- FIN DE LA L√ìGICA DE REINTENTOS ---


        // 3. Generar direcci√≥n inventada (si aplica)
        if (extractedData.ciudad && extractedData.ciudad.trim().length > 0) {
            console.log("[AIService - Extractor] üè† Ciudad encontrada. Generando direcci√≥n inventada...");
            let street1 = getRandomElement(streetNames);
            let street2 = getRandomElement(streetNames);
            while (street1 === street2) { // Asegura calles diferentes
                street2 = getRandomElement(streetNames);
            }
            // A√±ade la direcci√≥n inventada a los datos extra√≠dos para que el merger la procese
            extractedData.direccion_inventada = `${street1} c/ ${street2}`; 
            console.log(`[AIService - Extractor] ‚úÖ Direcci√≥n inventada generada: "${extractedData.direccion_inventada}"`);
        } else {
             console.log("[AIService - Extractor] ‚ÑπÔ∏è No se extrajo ciudad, no se genera direcci√≥n inventada.");
        }

        // ====================================================================
        // --- INICIO DE L√ìGICA DE MERGE (Portado de n8n) ---
        // ====================================================================
        console.log("[AIService - Merger] üîÑ Iniciando merge con estado actual...");

        // 4. Copiar campos NO referencia de la IA al output
        // (Esto incluye 'ciudad', 'barrio' y 'direccion_inventada' si existen)
        for (const key in extractedData) {
            const value = extractedData[key];
            const hasValue = value !== null && value !== undefined && value !== '';
            
            // Copia cualquier clave que NO comience con 'referencia_' y tenga valor
            if (hasValue && !key.startsWith('referencia_')) {
                console.log(`[AIService - Merger] Copiando campo no-referencia: ${key}`);
                outputData[key] = value;
            }
        }
        console.log("[AIService - Merger] üìã Output inicial (campos no-referencia):", outputData);


        // 5. Recolectar referencias extra√≠das por IA
        const extractedReferences = [];
        // A√±adir solo si existen y no est√°n vac√≠as en la respuesta de la IA
        if (extractedData.referencia_1 && extractedData.referencia_1 !== '') extractedReferences.push(extractedData.referencia_1);
        if (extractedData.referencia_2 && extractedData.referencia_2 !== '') extractedReferences.push(extractedData.referencia_2);
        if (extractedData.referencia_3 && extractedData.referencia_3 !== '') extractedReferences.push(extractedData.referencia_3);
        
        if(extractedReferences.length > 0) {
             console.log("[AIService - Merger] üìû Referencias extra√≠das v√°lidas:", extractedReferences);
        } else {
             console.log("[AIService - Merger] üìû No se extrajeron referencias v√°lidas.");
        }

        // 6. L√≥gica de llenado secuencial de referencias
        const referenceSlots = ['referencia_1', 'referencia_2', 'referencia_3'];
        let refsAvailable = [...extractedReferences]; // Copia para poder modificarla

        for (const slot of referenceSlots) {
            // Verificar si el slot actual en BBDD (currentState) est√° vac√≠o
            const isSlotEmpty = currentState[slot] === null || currentState[slot] === undefined || currentState[slot] === '';
            
            console.log(`[AIService - Merger] Comprobando slot ${slot}: ¬øVac√≠o en BBDD? ${isSlotEmpty}. ¬øRefs IA disponibles? ${refsAvailable.length > 0}`);

            if (isSlotEmpty && refsAvailable.length > 0) {
                // Si el slot est√° vac√≠o Y hay referencias disponibles de la IA...
                const refValueToAdd = refsAvailable.shift(); // Tomar la PRIMERA referencia disponible
                outputData[slot] = refValueToAdd; // Asignar el valor al slot en la salida
                console.log(`[AIService - Merger] -> Asignando al slot ${slot}:`, refValueToAdd);
            } else if (!isSlotEmpty) {
                console.log(`[AIService - Merger] -> Slot ${slot} ya ocupado en BBDD: "${currentState[slot]}"`);
            } else {
                 console.log(`[AIService - Merger] -> Slot ${slot} vac√≠o, pero no hay m√°s refs de IA.`);
            }
        }
        // ====================================================================
        // --- FIN DE L√ìGICA DE MERGE ---
        // ====================================================================

        console.log("[AIService] ‚úÖ Proceso completado. Datos finales a enviar:", outputData);
        return outputData; // Devuelve el objeto MERGEADO final

    } catch (error) {
        // Este catch ahora atrapa errores en la l√≥gica de MERGE 
        // o el error que lanzamos si TODOS los intentos de IA fallaron.
        console.error("[AIService] üî¥ Error general del proceso:", error.message);
        return {}; // Devuelve objeto vac√≠o en caso de error
    }
}

module.exports = {
    extractDataFromMessage,
};